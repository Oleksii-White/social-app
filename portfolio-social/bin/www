#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app'); // Твое приложение Express
var debug = require('debug')('portfolio-social:server'); // Модуль отладки
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// Добавляем логи, чтобы отслеживать запуск сервера
console.log(`Server will attempt to listen on port ${port}`);

server.listen(port); // Сервер начинает слушать порт
server.on('error', onError); // Обработчик ошибок сервера
server.on('listening', onListening); // Обработчик события успешного прослушивания

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Обработка специфических ошибок listen с дружественными сообщениями
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      console.error(`Unhandled server error: ${error.message}`); // Добавлен более подробный лог ошибки
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`Server successfully listening on ${bind}`); // Добавлен console.log для успешного запуска
  debug('Listening on ' + bind); // Это сообщение отладчика, которое увидим только при DEBUG=portfolio-social:server
}
